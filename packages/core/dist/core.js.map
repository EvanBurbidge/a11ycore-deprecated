{"version":3,"sources":["core.js"],"names":["admin","require","normaliseBuild","serviceKey","module","exports","sendBuild","projectId","results","defaultApp","initializeApp","credential","cert","databaseURL","db","firestore","builds","collection","projects","Promise","resolve","reject","Error","normalizedResults","doc","get","then","document","empty","add","catch","error","console"],"mappings":"AAAA,a,KAEMA,CAAAA,KAAK,CAAGC,OAAO,CAAC,gBAAD,C,CACf,CAAEC,cAAF,EAAqBD,OAAO,CAAC,iBAAD,C,CAC5BE,UAAU,CAAGF,OAAO,CAAC,uBAAD,C,CAE1BG,MAAM,CAACC,OAAP,CAAiB,CACfC,SADe,C,CAIjB,QAASA,CAAAA,SAAT,CAAmBC,CAAnB,CAA8BC,CAA9B,CAAuC,MAC/BC,CAAAA,CAAU,CAAGT,KAAK,CAACU,aAAN,CAAoB,CACrCC,UAAU,CAAEX,KAAK,CAACW,UAAN,CAAiBC,IAAjB,CAAsBT,UAAtB,CADyB,CAErCU,WAAW,CAAE,iCAFwB,CAApB,CADkB,CAK/BC,CAAE,CAAGL,CAAU,CAACM,SAAX,EAL0B,CAO/BC,CAAM,CAAGF,CAAE,CAACG,UAAH,CAAc,QAAd,CAPsB,CAQ/BC,CAAQ,CAAGJ,CAAE,CAACG,UAAH,CAAc,UAAd,CARoB,CASrC,MAAO,IAAIE,CAAAA,OAAJ,CAAY,CAACC,CAAD,CAAUC,CAAV,GAAqB,CACtC,GAAI,CAACd,CAAL,CACE,KAAMe,CAAAA,KAAK,CAAC,8BAAD,CAAX,CAEF,KAAMC,CAAAA,CAAiB,CAAGrB,cAAc,CAACK,CAAD,CAAYC,CAAZ,CAAqBR,KAArB,CAAxC,CACAkB,CAAQ,CACLM,GADH,CACOjB,CADP,EAEGkB,GAFH,GAGGC,IAHH,CAGSC,CAAD,EAAc,CAClB,GAAI,CAACA,CAAQ,CAACC,KAAd,CACEZ,CAAM,CAACa,GAAP,CAAWN,CAAX,EAA8BG,IAA9B,CAAmCN,CAAnC,EAA4CU,KAA5C,CAAkDT,CAAlD,CADF,KAIE,MADAA,CAAAA,CAAM,EACN,CAAMC,KAAK,CAAC,6BAAD,CAEd,CAVH,EAWGQ,KAXH,CAWUC,CAAD,EAAW,CAGhB,KAFAV,CAAAA,CAAM,EAEN,CADAW,OAAO,CAACD,KAAR,CAAcA,CAAd,CACA,CAAMT,KAAK,CAAC,6BAAD,CACZ,CAfH,CAgBD,CArBM,CAsBR","sourcesContent":["\"use strict\";\n\nconst admin = require(\"firebase-admin\");\nconst { normaliseBuild } = require('@a11ycore/utils');\nconst serviceKey = require(\"./serviceAccount.json\");\n\nmodule.exports = {\n  sendBuild,\n};\n\nfunction sendBuild(projectId, results) {\n  const defaultApp = admin.initializeApp({\n    credential: admin.credential.cert(serviceKey),\n    databaseURL: \"https://a11ycore.firebaseio.com\",\n  });\n  const db = defaultApp.firestore();\n  // creating a starting path in our database\n  const builds = db.collection(\"builds\");\n  const projects = db.collection(\"projects\");\n  return new Promise((resolve, reject) => {\n    if (!projectId) {\n      throw Error(\"you must supply a project id\");\n    }\n    const normalizedResults = normaliseBuild(projectId, results, admin);\n    projects\n      .doc(projectId)\n      .get()\n      .then((document) => {\n        if (!document.empty) {\n          builds.add(normalizedResults).then(resolve).catch(reject);\n        } else {\n          reject();\n          throw Error(\"that project does not exist\");\n        }\n      })\n      .catch((error) => {\n        reject();\n        console.error(error);\n        throw Error(\"that project does not exist\");\n      });\n  });\n}\n"]}