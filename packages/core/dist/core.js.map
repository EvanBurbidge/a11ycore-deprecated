{"version":3,"sources":["core.js"],"names":["admin","require","normaliseBuild","module","exports","configureFirebase","serviceKey","databaseUrl","firebaseConfig","defaultApp","initializeApp","databaseURL","credential","cert","db","firestore","builds","collection","buildsDb","projects","projectsDb","projectId","results","Promise","resolve","reject","Error","normalizedResults","doc","get","then","document","empty","add","catch","error","console"],"mappings":"AAAA,a,KACMA,CAAAA,KAAK,CAAGC,OAAO,CAAC,gBAAD,C,CACf,CAAEC,cAAF,EAAqBD,OAAO,CAAC,iBAAD,C,CAElCE,MAAM,CAACC,OAAP,CAAiB,CACfC,iBADe,C,CAIjB,QAASA,CAAAA,iBAAT,CAA2BC,CAA3B,CAAuCC,CAAvC,CAAoDC,CAAc,CAAG,EAArE,CAAyE,MACjEC,CAAAA,CAAU,CAAGT,KAAK,CAACU,aAAN,CAAoB,CACrCC,WAAW,CAAEJ,CADwB,CAErCK,UAAU,CAAEZ,KAAK,CAACY,UAAN,CAAiBC,IAAjB,CAAsBP,CAAtB,CAFyB,CAApB,CADoD,CAKjEQ,CAAE,CAAGL,CAAU,CAACM,SAAX,EAL4D,CAOjEC,CAAM,CAAGF,CAAE,CAACG,UAAH,CAAcT,CAAc,CAACU,QAA7B,CAPwD,CAQjEC,CAAQ,CAAGL,CAAE,CAACG,UAAH,CAAcT,CAAc,CAACY,UAA7B,CARsD,CASvE,MAAO,CAACC,CAAD,CAAYC,CAAZ,GACE,GAAIC,CAAAA,OAAJ,CAAY,CAACC,CAAD,CAAUC,CAAV,GAAqB,CACtC,GAAI,CAACJ,CAAL,CACE,KAAMK,CAAAA,KAAK,CAAC,8BAAD,CAAX,CAEF,KAAMC,CAAAA,CAAiB,CAAGzB,cAAc,CAACmB,CAAD,CAAYC,CAAZ,CAAqBtB,KAArB,CAAxC,CACAmB,CAAQ,CACLS,GADH,CACOP,CADP,EAEGQ,GAFH,GAGGC,IAHH,CAGSC,CAAD,EAAc,CAClB,GAAI,CAACA,CAAQ,CAACC,KAAd,CACEhB,CAAM,CAACiB,GAAP,CAAWN,CAAX,EAA8BG,IAA9B,CAAmCN,CAAnC,EAA4CU,KAA5C,CAAkDT,CAAlD,CADF,KAIE,MADAA,CAAAA,CAAM,EACN,CAAMC,KAAK,CAAC,6BAAD,CAEd,CAVH,EAWGQ,KAXH,CAWUC,CAAD,EAAW,CAGhB,KAFAV,CAAAA,CAAM,EAEN,CADAW,OAAO,CAACD,KAAR,CAAcA,CAAd,CACA,CAAMT,KAAK,CAAC,6BAAD,CACZ,CAfH,CAgBD,CArBM,CAuBV","sourcesContent":["\"use strict\";\nconst admin = require(\"firebase-admin\");\nconst { normaliseBuild } = require(\"@a11ycore/utils\");\n\nmodule.exports = {\n  configureFirebase,\n};\n\nfunction configureFirebase(serviceKey, databaseUrl, firebaseConfig = {}) {\n  const defaultApp = admin.initializeApp({\n    databaseURL: databaseUrl,\n    credential: admin.credential.cert(serviceKey),\n  });\n  const db = defaultApp.firestore();\n  // creating a starting path in our database\n  const builds = db.collection(firebaseConfig.buildsDb);\n  const projects = db.collection(firebaseConfig.projectsDb);\n  return (projectId, results) => {\n    return new Promise((resolve, reject) => {\n      if (!projectId) {\n        throw Error(\"you must supply a project id\");\n      }\n      const normalizedResults = normaliseBuild(projectId, results, admin);\n      projects\n        .doc(projectId)\n        .get()\n        .then((document) => {\n          if (!document.empty) {\n            builds.add(normalizedResults).then(resolve).catch(reject);\n          } else {\n            reject();\n            throw Error(\"that project does not exist\");\n          }\n        })\n        .catch((error) => {\n          reject();\n          console.error(error);\n          throw Error(\"that project does not exist\");\n        });\n    });\n  };\n}\n"]}